@page "/weather"
@using GloboClima.Web.Models
@using GloboClima.Web.Services
@using System.Threading.Tasks
@inject ApiService ApiService
@inject NavigationManager NavigationManager
@inject NotificationService NotificationService

<div class="weather-page">
    <div class="container py-3 py-md-4">
        <div class="row justify-content-center">
            <div class="col-12 col-lg-10 col-xl-8">
                <div class="@((initialLoadDone && ApiService.IsAuthenticated) ? "search-container mb-4 shadow-sm" : "d-none")">
                    <div class="input-group input-group-lg">
                        <span class="input-group-text border-end-0">
                            <i class="bi bi-search text-muted"></i>
                        </span>
                        <input type="search" 
                               value="@searchQuery"
                               @oninput="OnSearchChanged" 
                               placeholder="Buscar cidade..." 
                               class="form-control border-start-0"
                               @onkeypress="HandleKeyPress"
                               autofocus />
                    </div>

                @if (isLoading)
                {
                    <div class="text-center mt-3">
                        <div class="spinner-border text-primary" role="status">
                            <span class="visually-hidden">Carregando...</span>
                        </div>
                    </div>
                }

                @if (searchResults.Any())
                {
                    <div class="search-results mt-2 border rounded shadow-sm">
                        @foreach (var city in searchResults.Take(5))
                        {
                            <div class="search-result-item p-3 border-bottom d-flex align-items-center" 
                                 @onclick="() => SelectCity(city)"
                                 style="cursor: pointer;">
                                <i class="bi bi-geo-alt-fill me-3 text-primary"></i>
                                <div class="flex-grow-1">
                                    <div class="fw-semibold">@city.Name</div>
                                    <div class="text-muted small">@city.Country</div>
                                </div>
                                <i class="bi bi-chevron-right text-muted"></i>
                            </div>
                        }
                    </div>
                }
            </div>
        </div>

            @if (ApiService.IsAuthenticated && favorites.Any(f => f.Type.Equals("city", StringComparison.OrdinalIgnoreCase)))
            {
                <div class="mt-3">
                    <div class="d-flex align-items-center justify-content-between mb-2">
                        <h2 class="h6 mb-0">Suas cidades favoritas</h2>
                        <NavLink class="small text-decoration-none" href="/favorites">Ver todos</NavLink>
                    </div>
                    <div class="cards-grid">
                        @foreach (var fav in TopFavorites())
                        {
                            <div>
                                <div class="p-3 border rounded d-flex align-items-center justify-content-between h-100">
                                    <div>
                                        <div class="small text-uppercase text-muted">@fav.Type</div>
                                        <div class="fw-semibold">@fav.Name</div>
                                    </div>
                                    <button class="btn btn-sm btn-primary" @onclick="() => OpenFavorite(fav)">
                                        <i class="bi bi-box-arrow-up-right me-1"></i>Abrir
                                    </button>
                                </div>
                            </div>
                        }
                    </div>
                </div>
            }

            @if (result != null)
            {
                <div class="weather-card card shadow-sm mb-4 border-0">
                    <div class="card-body p-4">
                        <div class="d-flex justify-content-between align-items-center mb-4">
                            <div>
                                <h1 class="h3 fw-bold mb-1">@result.Weather.City</h1>
                                <div class="text-muted">@result.Country.Name</div>
                            </div>
                            <button class="btn btn-outline-primary btn-sm" @onclick="FavoriteCity">
                                <i class="bi @(isCityFavorite ? "bi-star-fill text-warning" : "bi-star") me-1"></i>
                                @(isCityFavorite ? "Favoritado" : "Favoritar")
                            </button>
                        </div>
                        
                        <div class="weather-current d-flex align-items-center justify-content-between mb-4 p-4 rounded-3">
                            <div class="d-flex align-items-center">
                                <div class="weather-icon me-4">
                                    <i class="bi @GetWeatherIcon(result.Weather.Description)" style="font-size: 5rem;"></i>
                                </div>
                                <div class="weather-temp">
                                    <div class="display-3 fw-bold mb-0">@Math.Round(result.Weather.Temperature)°C</div>
                                    <div class="text-capitalize fs-5">@result.Weather.Description</div>
                                </div>
                            </div>
                            <div class="weather-feels-like text-end">
                                <div class="small opacity-75">Sensação</div>
                                <div class="h4 fw-bold">@Math.Round(result.Weather.FeelsLike)°C</div>
                            </div>
                        </div>

                        <div class="weather-details row g-3 mb-4">
                            <div class="col-6 col-md-3">
                                <div class="detail-card p-3 text-center rounded-3 h-100">
                                    <i class="bi bi-droplet-fill text-primary mb-2" style="font-size: 1.5rem;"></i>
                                    <div class="text-muted small mb-1">Umidade</div>
                                    <div class="h5 fw-bold text-primary">@result.Weather.Humidity<small class="text-muted">%</small></div>
                                </div>
                            </div>
                            <div class="col-6 col-md-3">
                                <div class="detail-card p-3 text-center rounded-3 h-100">
                                    <i class="bi bi-wind text-primary mb-2" style="font-size: 1.5rem;"></i>
                                    <div class="text-muted small mb-1">Vento</div>
                                    <div class="h5 fw-bold text-primary">@Math.Round(result.Weather.WindSpeed)<small class="text-muted"> km/h</small></div>
                                </div>
                            </div>
                            <div class="col-6 col-md-3">
                                <div class="detail-card p-3 text-center rounded-3 h-100">
                                    <i class="bi bi-cloud-arrow-down-fill text-primary mb-2" style="font-size: 1.5rem;"></i>
                                    <div class="text-muted small mb-1">Pressão</div>
                                    <div class="h5 fw-bold text-primary">@result.Weather.Pressure<small class="text-muted"> hPa</small></div>
                                </div>
                            </div>
                            <div class="col-6 col-md-3">
                                <div class="detail-card p-3 text-center rounded-3 h-100">
                                    <i class="bi bi-eye-fill text-primary mb-2" style="font-size: 1.5rem;"></i>
                                    <div class="text-muted small mb-1">Visibilidade</div>
                                    <div class="h5 fw-bold text-primary">@(Math.Round(result.Weather.Visibility / 1000.0, 1))<small class="text-muted"> km</small></div>
                                </div>
                            </div>
                        </div>
                        <div class="row g-3 mb-4">
                            <div class="col-6 col-md-3">
                                <div class="detail-card p-3 text-center rounded-3 h-100">
                                    <i class="bi bi-thermometer-half text-primary mb-2" style="font-size: 1.5rem;"></i>
                                    <div class="text-muted small mb-1">Mínima</div>
                                    <div class="h5 fw-bold text-primary">@Math.Round(result.Weather.TempMin)<small class="text-muted"> °C</small></div>
                                </div>
                            </div>
                            <div class="col-6 col-md-3">
                                <div class="detail-card p-3 text-center rounded-3 h-100">
                                    <i class="bi bi-thermometer-high text-primary mb-2" style="font-size: 1.5rem;"></i>
                                    <div class="text-muted small mb-1">Máxima</div>
                                    <div class="h5 fw-bold text-primary">@Math.Round(result.Weather.TempMax)<small class="text-muted"> °C</small></div>
                                </div>
                            </div>
                        </div>

                        <div class="country-info mt-4 pt-3 border-top">
                            <div class="d-flex justify-content-between align-items-center mb-3">
                                <h4 class="h5 mb-0">
                                    <i class="bi bi-globe-americas me-2"></i>
                                    Sobre @result.Country.Name
                                </h4>
                                <button class="btn btn-outline-success btn-sm" @onclick="FavoriteCountry">
                                    <i class="bi @(isCountryFavorite ? "bi-heart-fill text-danger" : "bi-heart") me-1"></i>
                                    @(isCountryFavorite ? "Favoritado" : "Favoritar")
                                </button>
                            </div>
                            
                            <div class="row g-3">
                                <div class="col-md-6">
                                    <div class="info-item">
                                        <i class="bi bi-people-fill text-muted me-2"></i>
                                        <span class="text-muted">População:</span>
                                        <span class="fw-semibold ms-1">@FormatPopulation(result.Country.Population)</span>
                                    </div>
                                    <div class="info-item mt-2">
                                        <i class="bi bi-translate text-muted me-2"></i>
                                        <span class="text-muted">Idiomas:</span>
                                        <span class="fw-semibold ms-1">@string.Join(", ", result.Country.Languages.Take(3))</span>
                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <div class="info-item">
                                        <i class="bi bi-currency-exchange text-muted me-2"></i>
                                        <span class="text-muted">Moedas:</span>
                                        <span class="fw-semibold ms-1">@string.Join(", ", result.Country.Currencies.Take(2))</span>
                                    </div>
                                    <div class="info-item mt-2">
                                        <i class="bi bi-signpost-split text-muted me-2"></i>
                                        <span class="text-muted">Região:</span>
                                        <span class="fw-semibold ms-1">@result.Country.Region</span>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>
</div>

@if (!string.IsNullOrEmpty(message))
{
    <div class="toast-container position-fixed bottom-0 end-0 p-3">
        <div class="toast show" role="alert" aria-live="assertive" aria-atomic="true">
            <div class="toast-header">
                <i class="bi @(isSuccess ? "bi-check-circle-fill text-success" : "bi-exclamation-triangle-fill text-danger") me-2"></i>
                <strong class="me-auto">@(isSuccess ? "Sucesso" : "Aviso")</strong>
                <button type="button" class="btn-close" @onclick="() => message = string.Empty"></button>
            </div>
            <div class="toast-body">
                @message
            </div>
        </div>
    </div>
}

@code {
    private string searchQuery = string.Empty;
    private List<GeocodingResult> searchResults = new();
    private WeatherAndCountry? result;
    private string message = string.Empty;
    private bool isLoading = false;
    private bool isSuccess = false;
    private bool isCityFavorite = false;
    private bool isCountryFavorite = false;
    private List<Favorite> favorites = new();
    private System.Threading.CancellationTokenSource? searchCts;
    private System.Threading.CancellationTokenSource? debounceCts;
    private string? lastLoadedQueryCity;
    private bool initialLoadDone = false;
    
    [Parameter]
    [SupplyParameterFromQuery(Name = "city")]
    public string? QueryCity { get; set; }
    
    protected override async Task OnInitializedAsync()
    {
        await LoadFavorites();
    }
    
    protected override async Task OnParametersSetAsync()
    {
        if (!initialLoadDone) return;
        try
        {
            if (!ApiService.IsAuthenticated)
            {
                NavigationManager.NavigateTo("/login", true);
                return;
            }
            
            if (!string.IsNullOrWhiteSpace(QueryCity) &&
                !string.Equals(lastLoadedQueryCity, QueryCity, StringComparison.OrdinalIgnoreCase))
            {
                await LoadCityFromQuery(QueryCity);
                lastLoadedQueryCity = QueryCity;
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            await HandleErrorAsync("Erro ao processar parâmetros da página", ex);
        }
    }

    private IEnumerable<Favorite> TopFavorites()
    {
        if (favorites == null || favorites.Count == 0) yield break;
        foreach (var f in favorites
            .Where(f => f.Type.Equals("city", StringComparison.OrdinalIgnoreCase))
            .OrderByDescending(f => f.CreatedAt)
            .Take(3))
        {
            yield return f;
        }
    }

    private async Task OpenFavorite(Favorite fav)
    {
        if (fav == null) return;
        try
        {
            if (string.Equals(fav.Type, "city", StringComparison.OrdinalIgnoreCase))
            {
                var q = fav.Name ?? string.Empty;
                if (string.IsNullOrWhiteSpace(q)) return;
                searchQuery = q;
                lastLoadedQueryCity = q;
                await LoadCityFromQuery(q);
            }
            else if (string.Equals(fav.Type, "country", StringComparison.OrdinalIgnoreCase))
            {
                var countryName = fav.Name ?? string.Empty;
                var cities = await ApiService.SearchCities(countryName);
                var city = cities?.FirstOrDefault(c => string.Equals(c.Country, countryName, StringComparison.OrdinalIgnoreCase))
                           ?? cities?.FirstOrDefault();
                if (city != null)
                {
                    await SelectCity(city);
                }
                else
                {
                    await NotificationService.ShowWarningAsync("Não foi possível encontrar cidades para este país.");
                }
            }
        }
        catch (Exception ex)
        {
            await HandleErrorAsync("Erro ao abrir favorito", ex);
        }
    }
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && !initialLoadDone)
        {
            try
            {
                await ApiService.LoadToken();

                if (!ApiService.IsAuthenticated)
                {
                    NavigationManager.NavigateTo("/login", true);
                    return;
                }

                await LoadFavorites();

                if (!string.IsNullOrWhiteSpace(QueryCity))
                {
                    await LoadCityFromQuery(QueryCity);
                    lastLoadedQueryCity = QueryCity;
                }
                else
                {
                    await TryGetUserLocation();
                }
                
                initialLoadDone = true;
                StateHasChanged();
            }
            catch (Exception ex)
            {
                await HandleErrorAsync("Erro ao carregar a página", ex);
            }
        }
    }

    private async Task LoadCityFromQuery(string query)
    {
        try
        {
            isLoading = true;
            StateHasChanged();

            var cities = await ApiService.SearchCities(query);
            if (cities != null && cities.Any())
            {
                await SelectCity(cities.First(), false);
            }
            else
            {
                message = "Não foi possível encontrar a cidade favorita. Mostrando localização padrão.";
                await NotificationService.ShowErrorAsync(message);
                await TryGetUserLocation();
            }
        }
        catch (Exception ex)
        {
            await HandleErrorAsync("Erro ao carregar cidade favorita", ex);
        }
        finally
        {
            isLoading = false;
        }
    }
    
    public void Dispose()
    {
        searchCts?.Dispose();
        debounceCts?.Dispose();
    }

    private async Task TryGetUserLocation()
    {
        try
        {
            double latitude = -23.5505;
            double longitude = -46.6333;
            
            
            isLoading = true;
            StateHasChanged();
            
            result = await ApiService.GetWeatherAndCountry(latitude, longitude);
            if (result != null)
            {
                await LoadFavorites();
            }
        }
        catch (Exception ex)
        {
            await HandleErrorAsync("Erro ao obter localização", ex);
        }
        finally
        {
            isLoading = false;
        }
    }
    
    private async Task LoadFavorites()
    {
        try
        {
            var list = await ApiService.GetFavorites();
            favorites = list ?? new List<Favorite>();

            if (result != null)
            {
                isCityFavorite = favorites.Any(f =>
                    f.Type.Equals("city", StringComparison.OrdinalIgnoreCase) &&
                    (f.Name?.StartsWith(result.Weather.City, StringComparison.OrdinalIgnoreCase) ?? false));

                isCountryFavorite = favorites.Any(f =>
                    f.Type.Equals("country", StringComparison.OrdinalIgnoreCase) &&
                    string.Equals(f.Name, result.Country.Name, StringComparison.OrdinalIgnoreCase));
            }

            StateHasChanged();
        }
        catch (Exception ex)
        {
            await HandleErrorAsync("Erro ao carregar favoritos", ex);
        }
    }
    
    private async Task PerformSearch()
    {
        if (string.IsNullOrWhiteSpace(searchQuery) || searchQuery.Length < 3)
        {
            searchResults.Clear();
            await InvokeAsync(StateHasChanged);
            return;
        }

        try
        {
            isLoading = true;
            await InvokeAsync(StateHasChanged);

            searchCts?.Cancel();
            searchCts = new System.Threading.CancellationTokenSource();
            
            searchResults = await ApiService.SearchCities(searchQuery, searchCts.Token);
            
            if (searchResults == null)
            {
                searchResults = new List<GeocodingResult>();
            }
        }
        catch (OperationCanceledException)
        {
            return;
        }
        catch (Exception ex)
        {
            await HandleErrorAsync("Erro ao buscar cidades", ex);
            searchResults = new List<GeocodingResult>();
        }
        finally
        {
            isLoading = false;
            await InvokeAsync(StateHasChanged);
        }
    }
    
    private async Task OnSearchChanged(ChangeEventArgs e)
    {
        var newValue = e?.Value?.ToString() ?? string.Empty;
        if (!string.Equals(newValue, searchQuery, StringComparison.Ordinal))
        {
            searchQuery = newValue;
        }

        debounceCts?.Cancel();

        if (string.IsNullOrWhiteSpace(searchQuery) || searchQuery.Length < 3)
        {
            searchResults.Clear();
            await InvokeAsync(StateHasChanged);
            return;
        }

        var cts = debounceCts = new System.Threading.CancellationTokenSource();
        try
        {
            await Task.Delay(300, cts.Token);
            if (cts.IsCancellationRequested) return;

            await PerformSearch();
        }
        catch (OperationCanceledException)
        {
        }
    }

    private async Task SelectCity(GeocodingResult city, bool updateInput = true)
    {
        try
        {
            isLoading = true;
            await InvokeAsync(StateHasChanged);

            if (updateInput)
                searchQuery = $"{city.Name}, {city.Country}";

            result = await ApiService.GetWeatherAndCountry(city.Lat, city.Lon);

            if (result != null)
            {
                await LoadFavorites();
                message = string.Empty;
            }
            else
            {
                message = "Não foi possível carregar os dados da cidade.";
                await NotificationService.ShowErrorAsync(message);
            }
        }
        catch (Exception ex)
        {
            await HandleErrorAsync("Erro ao carregar dados da cidade", ex);
        }
        finally
        {
            isLoading = false;
            await InvokeAsync(StateHasChanged);
        }
    }

    private async Task HandleErrorAsync(string message, Exception ex)
    {
        this.message = $"{message}: {ex.Message}";
        isSuccess = false;
        Console.Error.WriteLine($"Error: {message}\n{ex}");
        await NotificationService.ShowErrorAsync(this.message);
        await InvokeAsync(StateHasChanged);
    }
    
    private string GetWeatherIcon(string description)
    {
        if (string.IsNullOrEmpty(description)) return "bi-question-circle";
        
        return description.ToLower() switch
        {
            var d when d.Contains("thunder") => "bi-cloud-lightning-rain-fill text-warning",
            var d when d.Contains("rain") => "bi-cloud-rain-heavy-fill text-primary",
            var d when d.Contains("snow") => "bi-snow text-info",
            var d when d.Contains("cloud") => "bi-cloud-fill text-secondary",
            var d when d.Contains("sun") || d.Contains("clear") => "bi-sun-fill text-warning",
            _ => "bi-cloud-sun-fill text-warning"
        };
    }
    
    private string FormatPopulation(int population)
    {
        if (population >= 1000000)
            return $"{(population / 1000000.0):0.##}M";
        if (population >= 1000)
            return $"{(population / 1000.0):0.##}K";
        return population.ToString("N0");
    }

    private async Task HandleKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter" && !string.IsNullOrWhiteSpace(searchQuery))
        {
            debounceCts?.Cancel();
            searchCts?.Cancel();
            await PerformSearch();

            var query = searchQuery.Trim();
            GeocodingResult? match = null;

            match = searchResults.FirstOrDefault(c =>
                string.Equals($"{c.Name}, {c.Country}", query, StringComparison.OrdinalIgnoreCase));

            match ??= searchResults.FirstOrDefault(c =>
                string.Equals(c.Name, query, StringComparison.OrdinalIgnoreCase));

            match ??= searchResults.FirstOrDefault(c =>
                c.Name.StartsWith(query, StringComparison.OrdinalIgnoreCase));

            if (match == null && searchResults.Any())
                match = searchResults.First();

            if (match != null)
            {
                await SelectCity(match);
            }
        }
    }


    private async Task FavoriteCity()
    {
        if (result == null) return;
        try
        {
            if (isCityFavorite)
            {
                await NotificationService.ShowSuccessAsync("Cidade já está nos favoritos.");
                return;
            }

            var existing = await ApiService.GetFavorites();
            if (existing.Any(f => f.Type.Equals("city", StringComparison.OrdinalIgnoreCase) && (f.Name?.StartsWith(result.Weather.City, StringComparison.OrdinalIgnoreCase) ?? false)))
            {
                isCityFavorite = true;
                await NotificationService.ShowSuccessAsync("Cidade já está nos favoritos.");
                return;
            }

            var success = await ApiService.AddFavorite("city", $"{result.Weather.City},{result.Country.Name}");
            
            isSuccess = success;
            message = success ? "Cidade favoritada com sucesso!" : "Erro ao favoritar cidade.";
            
            if (success)
            {
                isCityFavorite = true;
                await NotificationService.ShowSuccessAsync(message);
                await LoadFavorites();
            }
            else
            {
                await NotificationService.ShowErrorAsync(message);
            }
        }
        catch (Exception ex)
        {
            await HandleErrorAsync("Erro ao favoritar cidade", ex);
        }
    }

    private async Task FavoriteCountry()
    {
        if (result == null) return;
        try
        {
            if (isCountryFavorite)
            {
                await NotificationService.ShowSuccessAsync("País já está nos favoritos.");
                return;
            }

            var existing = await ApiService.GetFavorites();
            if (existing.Any(f => f.Type.Equals("country", StringComparison.OrdinalIgnoreCase) && string.Equals(f.Name, result.Country.Name, StringComparison.OrdinalIgnoreCase)))
            {
                isCountryFavorite = true;
                await NotificationService.ShowSuccessAsync("País já está nos favoritos.");
                return;
            }

            var success = await ApiService.AddFavorite("country", result.Country.Name);
            
            isSuccess = success;
            message = success ? "País favoritado com sucesso!" : "Erro ao favoritar país.";
            
            if (success)
            {
                isCountryFavorite = true;
                await NotificationService.ShowSuccessAsync(message);
                await LoadFavorites();
            }
            else
            {
                await NotificationService.ShowErrorAsync(message);
            }
        }
        catch (Exception ex)
        {
            await HandleErrorAsync("Erro ao favoritar país", ex);
        }
    }
}
